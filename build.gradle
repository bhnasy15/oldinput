import dev.architectury.pack200.java.Pack200Adapter

plugins {
    id 'gg.essential.loom' version '0.10.0+'
    id "dev.architectury.architectury-pack200" version "0.1.3"
}

group = project.maven_group
version = "${project.mod_version}+${project.minecraft_version}"

base {
    archivesName = 'oldinput'
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(8)

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

loom {
    forge {
        pack200Provider.set(new Pack200Adapter())
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "de.oceanlabs.mcp:mcp_stable:${project.mcp_mappings}"
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "oldinput",
                "Specification-Vendor"    : "uku",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "uku",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

tasks.processResources {
    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": project.minecraft_version
    }
}
